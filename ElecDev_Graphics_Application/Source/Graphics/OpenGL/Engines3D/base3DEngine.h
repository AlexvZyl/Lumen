#pragma once

/*
The 3D base engine is going to be a child of the 2D engine so that the same pointer can point to the 3D engine.
Some modifications will have to be applied to the matrices and the mouse handling, but other than that the same principles should apply.
*/

//=============================================================================================================================================//
//  Includes.																																   //
//=============================================================================================================================================//

// The base 2D engine.
#include "../Engine2D/BaseEngine/baseEngineCore.h"

//=============================================================================================================================================//
//  Base 3D Engine Class.																													   //
//=============================================================================================================================================//

// Inherits from the 2D base engine.
class Base3DEngineGL : public BaseEngineGL
{
public:

	//----------------------------------------------------------------------------------------------------------------------
	//  Variables.
	//----------------------------------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------------------------------
	//  Constructor and Destructor.
	//----------------------------------------------------------------------------------------------------------------------

	// Constructor
	Base3DEngineGL(stateMachine* states);
	// Destructor.
	~Base3DEngineGL();

	//---------------------------------------------------------------------------------------------------------------------
	//  Rendering.
	//---------------------------------------------------------------------------------------------------------------------

	// Rendering loop.
	virtual void renderLoop();

	//---------------------------------------------------------------------------------------------------------------------
	//  API
	//---------------------------------------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------------------------------------
	//  Window events.
	//---------------------------------------------------------------------------------------------------------------------

	virtual void resizeEvent(int width, int height);

	//---------------------------------------------------------------------------------------------------------------------
	//  Mouse events.
	//---------------------------------------------------------------------------------------------------------------------

	//// Handling mouse events.
	//virtual void mousePressLeft(float pixelCoords[2]);
	//virtual void mousePressRight();
	//virtual void mouseMoveEvent(float pixelCoords[2], int buttonState);
	//virtual void mouseScrollEvent(float pixelCoords[2], float yOffset);

	//--------------------------------------------------------------------------------------------------------------------
};

//=============================================================================================================================================//
//  EOF.																																	   //
//=============================================================================================================================================//