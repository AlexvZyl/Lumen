#pragma once

//=============================================================================================================================================//
//  Includes.																																   //
//=============================================================================================================================================//

#include "Entity.h"
#include <string>
#include <map>

//=============================================================================================================================================//
//  Forward declarations.																													   //
//=============================================================================================================================================//

class VertexArrayObject;
struct Character;
struct Font;

//=============================================================================================================================================//
//  Class.																																	   //
//=============================================================================================================================================//

class Text : public Entity
{
public:

	// Constructor.
	// Takes the normal texture information as input, as well as the VAO that it has to render to
	// and also the font that it has to use to render.
	Text(std::string text, glm::vec3* position, glm::vec4* color, float scale, VertexArrayObject* vao, Font* font);
	// Destructor.
	~Text();
	void setLayer(float layer);
};

//=============================================================================================================================================//
//  EOF.																																	   //
//=============================================================================================================================================//
